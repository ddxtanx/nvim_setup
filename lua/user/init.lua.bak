--              AstroNvim Configuration Table
-- All configuration changes should go inside of the table below

-- You can think of a Lua "table" as a dictionary like data structure the
-- normal format is "key = value". These also handle array like data structures
-- where a value with no key simply has an implicit numeric key
local config = {

  -- Configure AstroNvim updates
  updater = {
    remote = "origin", -- remote to use
    channel = "nightly", -- "stable" or "nightly"
    version = "latest", -- "latest", tag name, or regex search like "v1.*" to only do updates before v2 (STABLE ONLY)
    branch = "main", -- branch name (NIGHTLY ONLY)
    commit = nil, -- commit hash (NIGHTLY ONLY)
    pin_plugins = nil, -- nil, true, false (nil will pin plugins on stable only)
    skip_prompts = false, -- skip prompts about breaking changes
    show_changelog = true, -- show the changelog after performing an update
    auto_reload = false, -- automatically reload and sync packer after a successful update
    auto_quit = false, -- automatically quit the current session after a successful update
    -- remotes = { -- easily add new remotes to track
    --   ["remote_name"] = "https://remote_url.come/repo.git", -- full remote url
    --   ["remote2"] = "github_user/repo", -- GitHub user/repo shortcut,
    --   ["remote3"] = "github_user", -- GitHub user assume AstroNvim fork
    -- },
  },

  -- Set colorscheme to use
  colorscheme = "default_theme",

  -- Add highlight groups in any theme
  highlights = {
    -- init = { -- this table overrides highlights in all themes
    --   Normal = { bg = "#000000" },
    -- }
    -- duskfox = { -- a table of overrides/changes to the duskfox theme
    --   Normal = { bg = "#000000" },
    -- },
  },

  -- set vim options here (vim.<first_key>.<second_key> = value)
  options = {
    opt = {
      -- set to true or false etc.
      relativenumber = true, -- sets vim.opt.relativenumber
      number = true, -- sets vim.opt.number
      spell = false, -- sets vim.opt.spell
      signcolumn = "auto", -- sets vim.opt.signcolumn to auto
      wrap = false, -- sets vim.opt.wrap
    },
    g = {
      mapleader = " ", -- sets vim.g.mapleader
      autoformat_enabled = true, -- enable or disable auto formatting at start (lsp.formatting.format_on_save must be enabled)
      cmp_enabled = true, -- enable completion at start
      autopairs_enabled = true, -- enable autopairs at start
      diagnostics_enabled = true, -- enable diagnostics at start
      status_diagnostics_enabled = true, -- enable diagnostics in statusline
      icons_enabled = true, -- disable icons in the UI (disable if no nerd font is available, requires :PackerSync after changing)
      ui_notifications_enabled = true, -- disable notifications when toggling UI elements
    },
  },
  -- If you need more control, you can use the function()...end notation
  -- options = function(local_vim)
  --   local_vim.opt.relativenumber = true
  --   local_vim.g.mapleader = " "
  --   local_vim.opt.whichwrap = vim.opt.whichwrap - { 'b', 's' } -- removing option from list
  --   local_vim.opt.shortmess = vim.opt.shortmess + { I = true } -- add to option list
  --
  --   return local_vim
  -- end,

  -- Set dashboard header
  header = {
    " █████  ███████ ████████ ██████   ██████",
    "██   ██ ██         ██    ██   ██ ██    ██",
    "███████ ███████    ██    ██████  ██    ██",
    "██   ██      ██    ██    ██   ██ ██    ██",
    "██   ██ ███████    ██    ██   ██  ██████",
    " ",
    "    ███    ██ ██    ██ ██ ███    ███",
    "    ████   ██ ██    ██ ██ ████  ████",
    "    ██ ██  ██ ██    ██ ██ ██ ████ ██",
    "    ██  ██ ██  ██  ██  ██ ██  ██  ██",
    "    ██   ████   ████   ██ ██      ██",
  },

  -- Default theme configuration
  default_theme = {
    -- Modify the color palette for the default theme
    colors = {
      fg = "#abb2bf",
      bg = "#1e222a",
    },
    highlights = function(hl) -- or a function that returns a new table of colors to set
      local C = require "default_theme.colors"

      hl.Normal = { fg = C.fg, bg = C.bg }

      -- New approach instead of diagnostic_style
      hl.DiagnosticError.italic = true
      hl.DiagnosticHint.italic = true
      hl.DiagnosticInfo.italic = true
      hl.DiagnosticWarn.italic = true

      return hl
    end,
    -- enable or disable highlighting for extra plugins
    plugins = {
      aerial = true,
      beacon = false,
      bufferline = true,
      cmp = true,
      dashboard = true,
      highlighturl = true,
      hop = false,
      indent_blankline = true,
      lightspeed = false,
      ["neo-tree"] = true,
      notify = true,
      ["nvim-tree"] = false,
      ["nvim-web-devicons"] = true,
      rainbow = true,
      symbols_outline = false,
      telescope = true,
      treesitter = true,
      vimwiki = false,
      ["which-key"] = true,
    },
  },

  -- Diagnostics configuration (for vim.diagnostics.config({...})) when diagnostics are on
  diagnostics = {
    virtual_text = true,
    underline = true,
  },

  -- Extend LSP configuration
  lsp = {
    -- enable servers that you already have installed without mason
    servers = {
      -- "pyright"
    },
    formatting = {
      -- control auto formatting on save
      format_on_save = {
        enabled = true, -- enable or disable format on save globally
        allow_filetypes = { -- enable format on save for specified filetypes only
          -- "go",
        },
        ignore_filetypes = { -- disable format on save for specified filetypes
          -- "python",
        },
      },
      disabled = { -- disable formatting capabilities for the listed language servers
        -- "sumneko_lua",
      },
      timeout_ms = 1000, -- default format timeout
      -- filter = function(client) -- fully override the default formatting function
      --   return true
      -- end
    },
    -- easily add or disable built in mappings added during LSP attaching
    mappings = {
      n = {
        -- ["<leader>lf"] = false -- disable formatting keymap
      },
    },
    -- add to the global LSP on_attach function
    -- on_attach = function(client, bufnr)
    -- end,

    -- override the mason server-registration function
    -- server_registration = function(server, opts)
    --   require("lspconfig")[server].setup(opts)
    -- end,

    -- Add overrides for LSP server settings, the keys are the name of the server
    ["server-settings"] = {
      -- example for addings schemas to yamlls
      -- yamlls = { -- override table for require("lspconfig").yamlls.setup({...})
      --   settings = {
      --     yaml = {
      --       schemas = {
      --         ["http://json.schemastore.org/github-workflow"] = ".github/workflows/*.{yml,yaml}",
      --         ["http://json.schemastore.org/github-action"] = ".github/action.{yml,yaml}",
      --         ["http://json.schemastore.org/ansible-stable-2.9"] = "roles/tasks/*.{yml,yaml}",
      --       },
      --     },
      --   },
      -- },
    },
  },

  -- Mapping data with "desc" stored directly by vim.keymap.set().
  --
  -- Please use this mappings table to set keyboard mapping since this is the
  -- lower level configuration and more robust one. (which-key will
  -- automatically pick-up stored data by this setting.)
  mappings = {
    -- first key is the mode
    n = {
      -- second key is the lefthand side of the map
      -- mappings seen under group name "Buffer"
      ["<leader>bb"] = { "<cmd>tabnew<cr>", desc = "New tab" },
      ["<leader>bc"] = { "<cmd>BufferLinePickClose<cr>", desc = "Pick to close" },
      ["<leader>bj"] = { "<cmd>BufferLinePick<cr>", desc = "Pick to jump" },
      ["<leader>bt"] = { "<cmd>BufferLineSortByTabs<cr>", desc = "Sort by tabs" },
      -- quick save
      -- ["<C-s>"] = { ":w!<cr>", desc = "Save File" },  -- change description but the same command
    },
    t = {
      -- setting a mapping to false will disable it
      -- ["<esc>"] = false,
    },
  },

  -- Configure plugins
  plugins = {
    init = {
      -- You can disable default plugins as follows:
      -- ["goolord/alpha-nvim"] = { disable = true },

      -- You can also add new plugins here as well:
      -- Add plugins, the packer syntax without the "use"
      {"simrat39/inlay-hints.nvim"},
	  {
			  "neovim/nvim-lspconfig",
  	  		  event = { 
					  "BufReadPre", 
			  },
  	    	  wants = {
      		  "inlay-hints.nvim",
      		  },
      		  config = function()
        		require("config.lsp").setup()
      		  end,
     		  requires = {
        	{
            	"simrat39/inlay-hints.nvim",
            	config = function()
            		require("inlay-hints").setup()
        		end,
        	},
	},
     	},
	  {"simrat39/rust-tools.nvim"},
	  {"hrsh7th/cmp-nvim-lsp"},
	  {"hrsh7th/nvim-cmp"},
	  {"hrsh7th/cmp-vsnip"},
	  {"hrsh7th/cmp-path"},
	  {"hrsh7th/cmp-buffer"},
	  {'hrsh7th/vim-vsnip'},
	  {"nvim-lua/plenary.nvim"},
	  {"mfussenegger/nvim-dap"},
	  -- { "andweeb/presence.nvim" },
      -- {
      --   "ray-x/lsp_signature.nvim",
      --   event = "BufRead",
      --   config = function()
      --     require("lsp_signature").setup()
      --   end,
      -- },

      -- We also support a key value style plugin definition similar to NvChad:
      -- ["ray-x/lsp_signature.nvim"] = {
      --   event = "BufRead",
      --   config = function()
      --     require("lsp_signature").setup()
      --   end,
      -- },
    },
    -- All other entries override the require("<key>").setup({...}) call for default plugins
    ["null-ls"] = function(config) -- overrides `require("null-ls").setup(config)`
      -- config variable is the default configuration table for the setup function call
      -- local null_ls = require "null-ls"

      -- Check supported formatters and linters
      -- https://github.com/jose-elias-alvarez/null-ls.nvim/tree/main/lua/null-ls/builtins/formatting
      -- https://github.com/jose-elias-alvarez/null-ls.nvim/tree/main/lua/null-ls/builtins/diagnostics
      config.sources = {
        -- Set a formatter
        -- null_ls.builtins.formatting.stylua,
        -- null_ls.builtins.formatting.prettier,
      }
      return config -- return final config table
    end,
    treesitter = { -- overrides `require("treesitter").setup(...)`
      -- ensure_installed = { "lua" },
    },
    -- use mason-lspconfig to configure LSP installations
    ["mason-lspconfig"] = { -- overrides `require("mason-lspconfig").setup(...)`
      -- ensure_installed = { "sumneko_lua" },
    },
    -- use mason-null-ls to configure Formatters/Linter installation for null-ls sources
    ["mason-null-ls"] = { -- overrides `require("mason-null-ls").setup(...)`
      -- ensure_installed = { "prettier", "stylua" },
    },
    ["mason-nvim-dap"] = { -- overrides `require("mason-nvim-dap").setup(...)`
      -- ensure_installed = { "python" },
    },
  },

  -- LuaSnip Options
  luasnip = {
    -- Extend filetypes
    filetype_extend = {
      -- javascript = { "javascriptreact" },
    },
    -- Configure luasnip loaders (vscode, lua, and/or snipmate)
    vscode = {
      -- Add paths for including more VS Code style snippets in luasnip
      paths = {},
    },
  },

  -- CMP Source Priorities
  -- modify here the priorities of default cmp sources
  -- higher value == higher priority
  -- The value can also be set to a boolean for disabling default sources:
  -- false == disabled
  -- true == 1000
  cmp = {
    source_priority = {
      nvim_lsp = 1000,
      luasnip = 750,
      buffer = 500,
      path = 250,
    },
  },

  -- Modify which-key registration (Use this with mappings table in the above.)
  ["which-key"] = {
    -- Add bindings which show up as group name
    register = {
      -- first key is the mode, n == normal mode
      n = {
        -- second key is the prefix, <leader> prefixes
        ["<leader>"] = {
          -- third key is the key to bring up next level and its displayed
          -- group name in which-key top level menu
          ["b"] = { name = "Buffer" },
        },
      },
    },
  },

  -- This function is run last and is a good place to configuring
  -- augroups/autocommands and custom filetypes also this just pure lua so
  -- anything that doesn't fit in the normal config locations above can go here
  polish = function()
    -- Set up custom filetypes
    -- vim.filetype.add {
    --   extension = {
    --     foo = "fooscript",
    --   },
    --   filename = {
    --     ["Foofile"] = "fooscript",
    --   },
    --   pattern = {
    --     ["~/%.config/foo/.*"] = "fooscript",
    --   },
    -- }
  end,
}
-- Set completeopt to have a better completion experience
-- :help completeopt
-- menuone: popup even when there's only one match
-- noinsert: Do not insert text until a selection is made
-- noselect: Do not auto-select, nvim-cmp plugin will handle this for us.
vim.o.completeopt = "menuone,noinsert,noselect"

-- Avoid showing extra messages when using completion
vim.opt.shortmess = vim.opt.shortmess + "c"

local function on_attach(client, buffer)
  -- This callback is called when the LSP is atttached/enabled for this buffer
  -- we could set keymaps related to LSP, etc here.
end

--
---- Configure LSP through rust-tools.nvim plugin.
-- rust-tools will configure and enable certain LSP features for us.
-- See https://github.com/simrat39/rust-tools.nvim#configuration
--local opts = {
--  tools = { -- rust-tools options
--
--    -- how to execute terminal commands
--    -- options right now: termopen / quickfix
--
--    -- callback to execute once rust-analyzer is done initializing the workspace
--    -- The callback receives one parameter indicating the `health` of the server: "ok" | "warning" | "error"
--    on_initialized = nil,
--
--    -- automatically call RustReloadWorkspace when writing to a Cargo.toml file.
--    reload_workspace_from_cargo_toml = true,
--
--    -- These apply to the default RustSetInlayHints command
--    inlay_hints = {
--      -- automatically set inlay hints (type hints)
--      -- default: true
--      auto = true,
--
--      -- Only show inlay hints for the current line
--      only_current_line = false,
--
--      -- whether to show parameter hints with the inlay hints or not
--      -- default: true
--      show_parameter_hints = true,
--
--      -- prefix for parameter hints
--      -- default: "<-"
--      parameter_hints_prefix = "<- ",
--
--      -- prefix for all the other hints (type, chaining)
--      -- default: "=>"
--      other_hints_prefix = "=> ",
--
--      -- whether to align to the length of the longest line in the file
--      max_len_align = false,
--
--      -- padding from the left if max_len_align is true
--      max_len_align_padding = 1,
--
--      -- whether to align to the extreme right or not
--      right_align = false,
--
--      -- padding from the right if right_align is true
--      right_align_padding = 7,
--
--      -- The color of the hints
--      highlight = "Comment",
--    },
--
--    -- options same as lsp hover / vim.lsp.util.open_floating_preview()
--    hover_actions = {
--
--      -- the border that is used for the hover window
--      -- see vim.api.nvim_open_win()
--      border = {
--        { "╭", "FloatBorder" },
--        { "─", "FloatBorder" },
--        { "╮", "FloatBorder" },
--        { "│", "FloatBorder" },
--        { "╯", "FloatBorder" },
--        { "─", "FloatBorder" },
--        { "╰", "FloatBorder" },
--        { "│", "FloatBorder" },
--      },
--
--      -- Maximal width of the hover window. Nil means no max.
--      max_width = nil,
--
--      -- Maximal height of the hover window. Nil means no max.
--      max_height = nil,
--
--      -- whether the hover action window gets automatically focused
--      -- default: false
--      auto_focus = false,
--    },
--
--    -- settings for showing the crate graph based on graphviz and the dot
--    -- command
--    crate_graph = {
--      -- Backend used for displaying the graph
--      -- see: https://graphviz.org/docs/outputs/
--      -- default: x11
--      backend = "x11",
--      -- where to store the output, nil for no output stored (relative
--      -- path from pwd)
--      -- default: nil
--      output = nil,
--      -- true for all crates.io and external crates, false only the local
--      -- crates
--      -- default: true
--      full = true,
--
--      -- List of backends found on: https://graphviz.org/docs/outputs/
--      -- Is used for input validation and autocompletion
--      -- Last updated: 2021-08-26
--      enabled_graphviz_backends = {
--        "bmp",
--        "cgimage",
--        "canon",
--        "dot",
--        "gv",
--        "xdot",
--        "xdot1.2",
--        "xdot1.4",
--        "eps",
--        "exr",
--        "fig",
--        "gd",
--        "gd2",
--        "gif",
--        "gtk",
--        "ico",
--        "cmap",
--        "ismap",
--        "imap",
--        "cmapx",
--        "imap_np",
--        "cmapx_np",
--        "jpg",
--        "jpeg",
--        "jpe",
--        "jp2",
--        "json",
--        "json0",
--        "dot_json",
--        "xdot_json",
--        "pdf",
--        "pic",
--        "pct",
--        "pict",
--        "plain",
--        "plain-ext",
--        "png",
--        "pov",
--        "ps",
--        "ps2",
--        "psd",
--        "sgi",
--        "svg",
--        "svgz",
--        "tga",
--        "tiff",
--        "tif",
--        "tk",
--        "vml",
--        "vmlz",
--        "wbmp",
--        "webp",
--        "xlib",
--        "x11",
--      },
--    },
--  },
--
--  -- all the opts to send to nvim-lspconfig
--  -- these override the defaults set by rust-tools.nvim
--  -- see https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#rust_analyzer
--	server = {
--    -- on_attach is a callback called when the language server attachs to the buffer
--    on_attach = on_attach,
--    settings = {
--      -- to enable rust-analyzer settings visit:
--      -- https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/generated_config.adoc
--      ["rust-analyzer"] = {
--        -- enable clippy on save
--        checkOnSave = {
--          command = "clippy",
--        },
--      },
--    },
--  },
--  -- debugging stuff
--  dap = {
--    adapter = {
--      type = "executable",
--      command = "lldb-vscode",
--      name = "rt_lldb",
--    },
--  },
--}
--local rust_tools = require("rust-tools")
--rust_tools.setup(opts)
--local cmp = require("cmp")
--cmp.setup({
--  preselect = cmp.PreselectMode.None,
--  snippet = {
--    expand = function(args)
--      vim.fn["vsnip#anonymous"](args.body)
--    end,
--  },
--  mapping = {
--    ["<C-p>"] = cmp.mapping.select_prev_item(),
--    ["<C-n>"] = cmp.mapping.select_next_item(),
--    -- Add tab support
--    ["<S-Tab>"] = cmp.mapping.select_prev_item(),
--    ["<Tab>"] = cmp.mapping.select_next_item(),
--    ["<C-d>"] = cmp.mapping.scroll_docs(-4),
--    ["<C-f>"] = cmp.mapping.scroll_docs(4),
--    ["<C-Space>"] = cmp.mapping.complete(),
--    ["<C-e>"] = cmp.mapping.close(),
--    ["<CR>"] = cmp.mapping.confirm({
--      behavior = cmp.ConfirmBehavior.Insert,
--      select = true,
--    }),
--  },
--
--  -- Installed sources
--  sources = {
--    { name = "nvim_lsp" },
--    { name = "vsnip" },
--    { name = "path" },
--    { name = "buffer" },
--  },
--})
--vim.cmd([[
--tnoremap("<esc>", "<C-\><C-n>", opts)
--tnoremap('jk', "<C-\><C-n>", opts)
--tnoremap('<C-h>', "<C-\><C-n><C-W>h", opts)
--tnoremap('<C-j>', "<C-\><C-n><C-W>j", opts)
--tnoremap('<C-k>', "<C-\><C-n><C-W>k", opts)
--tnoremap('<C-l>', "<C-\><C-n><C-W>l", opts)
--]])
--require("inlay-hints").setup({
--  only_current_line = false,
--
--  eol = {
--    right_align = true,
--  }
--})
--local ih = require("inlay-hints")
--
--require("rust-tools").setup({
--  tools = {
--    on_initialized = function()
--      ih.set_all()
--    end,
--    inlay_hints = {
--      auto = false,
--    },
--  },
--  server = {
--    on_attach = function(c, b)
--      ih.on_attach(c, b)
--    end,
--  },
--})
return config
